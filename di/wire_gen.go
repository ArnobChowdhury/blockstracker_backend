// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package di

import (
	"blockstracker_backend/config"
	"blockstracker_backend/handlers"
	"blockstracker_backend/internal/database"
	"blockstracker_backend/internal/redis"
	"blockstracker_backend/internal/repositories"
	"blockstracker_backend/middleware"
	"blockstracker_backend/pkg/logger"
)

// Injectors from wire.go:

func InitializeAuthHandler() (*handlers.AuthHandler, error) {
	db := database.DBProvider()
	userRepository := repositories.NewUserRepository(db)
	sugaredLogger := logger.LoggerProvider()
	authConfig, err := config.LoadAuthConfig()
	if err != nil {
		return nil, err
	}
	redisConfig, err := config.LoadRedisConfig()
	if err != nil {
		return nil, err
	}
	client, err := redis.NewRedisClient(redisConfig)
	if err != nil {
		return nil, err
	}
	tokenRepository := repositories.NewTokenRepository(client)
	authHandler := handlers.NewAuthHandler(userRepository, sugaredLogger, authConfig, tokenRepository)
	return authHandler, nil
}

func InitializeAuthMiddleware() (*middleware.AuthMiddleware, error) {
	sugaredLogger := logger.LoggerProvider()
	authConfig, err := config.LoadAuthConfig()
	if err != nil {
		return nil, err
	}
	authMiddleware := middleware.NewAuthMiddleware(sugaredLogger, authConfig)
	return authMiddleware, nil
}

func InitializeTaskHandler() (*handlers.TaskHandler, error) {
	db := database.DBProvider()
	taskRepository := repositories.NewTaskRepository(db)
	changeRepository := repositories.NewChangeRepository(db)
	sugaredLogger := logger.LoggerProvider()
	taskHandler := handlers.NewTaskHandler(taskRepository, changeRepository, db, sugaredLogger)
	return taskHandler, nil
}

func InitializeTagHandler() (*handlers.TagHandler, error) {
	db := database.DBProvider()
	tagRepository := repositories.NewTagRepository(db)
	changeRepository := repositories.NewChangeRepository(db)
	sugaredLogger := logger.LoggerProvider()
	tagHandler := handlers.NewTagHandler(tagRepository, changeRepository, db, sugaredLogger)
	return tagHandler, nil
}

func InitializeSpaceHandler() (*handlers.SpaceHandler, error) {
	db := database.DBProvider()
	spaceRepository := repositories.NewSpaceRepository(db)
	changeRepository := repositories.NewChangeRepository(db)
	sugaredLogger := logger.LoggerProvider()
	spaceHandler := handlers.NewSpaceHandler(spaceRepository, changeRepository, db, sugaredLogger)
	return spaceHandler, nil
}
