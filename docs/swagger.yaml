basePath: /api/v1
definitions:
  models.CreateRepetitiveTaskTemplateRequest:
    properties:
      createdAt:
        type: string
      description:
        type: string
      friday:
        type: boolean
      isActive:
        type: boolean
      lastDateOfTaskGeneration:
        type: string
      modifiedAt:
        type: string
      monday:
        type: boolean
      priority:
        type: integer
      saturday:
        type: boolean
      schedule:
        type: string
      shouldBeScored:
        type: boolean
      spaceId:
        type: string
      sunday:
        type: boolean
      tags:
        items:
          $ref: '#/definitions/models.Tag'
        type: array
      tasks:
        items:
          $ref: '#/definitions/models.Task'
        type: array
      thursday:
        type: boolean
      timeOfDay:
        type: string
      title:
        type: string
      tuesday:
        type: boolean
      wednesday:
        type: boolean
    required:
    - createdAt
    - friday
    - isActive
    - modifiedAt
    - monday
    - priority
    - saturday
    - schedule
    - shouldBeScored
    - sunday
    - thursday
    - title
    - tuesday
    - wednesday
    type: object
  models.CreateRepetitiveTaskTemplateResponseForSwagger:
    properties:
      message:
        example: Success message
        type: string
      result:
        $ref: '#/definitions/models.RepetitiveTaskTemplate'
      status:
        example: Success
        type: string
    type: object
  models.EmailSignInRequest:
    properties:
      email:
        example: test@example.com
        type: string
      password:
        example: Strongpassword123
        type: string
    required:
    - email
    - password
    type: object
  models.ErrorResult:
    properties:
      message:
        example: Error message
        type: string
      status:
        example: Error
        type: string
    type: object
  models.GenericErrorResponse:
    properties:
      result:
        $ref: '#/definitions/models.ErrorResult'
    type: object
  models.GenericSuccessResponse:
    properties:
      result:
        $ref: '#/definitions/models.SuccessResult'
    type: object
  models.RefreshTokenRequest:
    properties:
      accessToken:
        example: accessToken
        type: string
      refreshToken:
        example: refreshToken
        type: string
    required:
    - accessToken
    - refreshToken
    type: object
  models.RepetitiveTaskTemplate:
    properties:
      createdAt:
        type: string
      description:
        type: string
      friday:
        type: boolean
      id:
        type: string
      isActive:
        type: boolean
      lastDateOfTaskGeneration:
        type: string
      modifiedAt:
        type: string
      monday:
        type: boolean
      priority:
        type: integer
      saturday:
        type: boolean
      schedule:
        type: string
      shouldBeScored:
        type: boolean
      space:
        $ref: '#/definitions/models.Space'
      spaceId:
        type: string
      sunday:
        type: boolean
      tags:
        items:
          $ref: '#/definitions/models.Tag'
        type: array
      tasks:
        items:
          $ref: '#/definitions/models.Task'
        type: array
      thursday:
        type: boolean
      timeOfDay:
        type: string
      title:
        type: string
      tuesday:
        type: boolean
      userId:
        description: Add UserID here
        type: string
      wednesday:
        type: boolean
    required:
    - isActive
    - monday
    - priority
    - schedule
    - shouldBeScored
    - title
    type: object
  models.SignInSuccessResponse:
    properties:
      result:
        $ref: '#/definitions/models.SignInSuccessResult'
    type: object
  models.SignInSuccessResult:
    properties:
      data:
        $ref: '#/definitions/models.TokenResponse'
      message:
        example: Success message
        type: string
      status:
        example: Success
        type: string
    type: object
  models.SignUpRequest:
    properties:
      email:
        example: test@example.com
        type: string
      password:
        example: Strongpassword123
        type: string
    required:
    - email
    - password
    type: object
  models.Space:
    properties:
      createdAt:
        type: string
      id:
        type: string
      modifiedAt:
        type: string
      name:
        type: string
      userId:
        type: string
    required:
    - createdAt
    - modifiedAt
    - name
    type: object
  models.SpaceRequest:
    properties:
      createdAt:
        type: string
      modifiedAt:
        type: string
      name:
        type: string
    required:
    - createdAt
    - modifiedAt
    - name
    type: object
  models.SpaceResponseForSwagger:
    properties:
      message:
        example: Success message
        type: string
      result:
        $ref: '#/definitions/models.Space'
      status:
        example: Success
        type: string
    type: object
  models.SuccessResult:
    properties:
      message:
        example: Success message
        type: string
      status:
        example: Success
        type: string
    type: object
  models.Tag:
    properties:
      createdAt:
        type: string
      id:
        type: string
      modifiedAt:
        type: string
      name:
        type: string
      userId:
        type: string
    required:
    - createdAt
    - modifiedAt
    - name
    type: object
  models.TagRequest:
    properties:
      createdAt:
        type: string
      modifiedAt:
        type: string
      name:
        type: string
    required:
    - createdAt
    - modifiedAt
    - name
    type: object
  models.TagResponseForSwagger:
    properties:
      message:
        example: Success message
        type: string
      result:
        $ref: '#/definitions/models.Tag'
      status:
        example: Success
        type: string
    type: object
  models.Task:
    properties:
      completionStatus:
        type: string
      createdAt:
        type: string
      description:
        type: string
      dueDate:
        type: string
      id:
        type: string
      isActive:
        type: boolean
      modifiedAt:
        type: string
      priority:
        type: integer
      repetitiveTaskTemplate:
        $ref: '#/definitions/models.RepetitiveTaskTemplate'
      repetitiveTaskTemplateId:
        type: string
      schedule:
        type: string
      score:
        type: integer
      shouldBeScored:
        type: boolean
      space:
        $ref: '#/definitions/models.Space'
      spaceId:
        type: string
      tags:
        items:
          $ref: '#/definitions/models.Tag'
        type: array
      timeOfDay:
        type: string
      title:
        type: string
      userId:
        description: Add UserID here
        type: string
    required:
    - completionStatus
    - isActive
    - modifiedAt
    - priority
    - schedule
    - shouldBeScored
    - title
    type: object
  models.TaskRequest:
    properties:
      completionStatus:
        type: string
      createdAt:
        type: string
      description:
        type: string
      dueDate:
        type: string
      isActive:
        type: boolean
      modifiedAt:
        type: string
      priority:
        type: integer
      repetitiveTaskTemplateId:
        type: string
      schedule:
        type: string
      score:
        type: integer
      shouldBeScored:
        type: boolean
      spaceId:
        type: string
      tags:
        items:
          $ref: '#/definitions/models.Tag'
        type: array
      timeOfDay:
        type: string
      title:
        type: string
    required:
    - completionStatus
    - createdAt
    - isActive
    - modifiedAt
    - priority
    - schedule
    - shouldBeScored
    - title
    type: object
  models.TaskResponseForSwagger:
    properties:
      message:
        example: Success message
        type: string
      result:
        $ref: '#/definitions/models.Task'
      status:
        example: Success
        type: string
    type: object
  models.TokenResponse:
    properties:
      accessToken:
        type: string
      refreshToken:
        type: string
    type: object
host: localhost:5000
info:
  contact: {}
  description: Blockstracker API
  title: Blockstracker
  version: "1.0"
paths:
  /auth/refresh:
    post:
      consumes:
      - application/json
      description: Refreshes the access token using a valid refresh token
      parameters:
      - description: Refresh token request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.RefreshTokenRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Token refresh successful
          schema:
            $ref: '#/definitions/models.SignInSuccessResponse'
        "400":
          description: Malformed Request
          schema:
            $ref: '#/definitions/models.GenericErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.GenericErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.GenericErrorResponse'
      summary: Refresh access token
      tags:
      - auth
  /auth/signin:
    post:
      consumes:
      - application/json
      description: Sign in with email and password
      parameters:
      - description: User sign in request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.EmailSignInRequest'
      produces:
      - application/json
      responses:
        "200":
          description: User sign in successful
          schema:
            $ref: '#/definitions/models.SignInSuccessResponse'
        "400":
          description: Malformed Request
          schema:
            $ref: '#/definitions/models.GenericErrorResponse'
        "401":
          description: Invalid Credentials
          schema:
            $ref: '#/definitions/models.GenericErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.GenericErrorResponse'
      summary: Sign in with email and password
      tags:
      - auth
  /auth/signout:
    post:
      consumes:
      - application/json
      description: Invalidates the user's access and refresh tokens
      produces:
      - application/json
      responses:
        "200":
          description: User sign out successful
          schema:
            $ref: '#/definitions/models.GenericSuccessResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.GenericErrorResponse'
      security:
      - BearerAuth: []
      summary: Sign out user
      tags:
      - auth
  /auth/signup:
    post:
      consumes:
      - application/json
      description: Signs up a new user with email and password
      parameters:
      - description: User sign up request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.SignUpRequest'
      produces:
      - application/json
      responses:
        "200":
          description: User creation successful
          schema:
            $ref: '#/definitions/models.GenericSuccessResponse'
        "400":
          description: Malformed Request
          schema:
            $ref: '#/definitions/models.GenericErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.GenericErrorResponse'
      summary: Sign up a new user
      tags:
      - auth
  /ping:
    get:
      description: Returns pong
      responses:
        "200":
          description: pong
          schema:
            type: string
      summary: Ping example
      tags:
      - example
  /spaces:
    post:
      consumes:
      - application/json
      description: Create a new Space with the given details
      parameters:
      - description: Space details
        in: body
        name: Space
        required: true
        schema:
          $ref: '#/definitions/models.SpaceRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.SpaceResponseForSwagger'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.GenericErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.GenericErrorResponse'
      summary: Create a new Space
      tags:
      - spaces
  /spaces/{id}:
    put:
      consumes:
      - application/json
      description: Update an existing Space with the given details
      parameters:
      - description: Space ID
        in: path
        name: id
        required: true
        type: string
      - description: Space details
        in: body
        name: space
        required: true
        schema:
          $ref: '#/definitions/models.SpaceRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.SpaceResponseForSwagger'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.GenericErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.GenericErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.GenericErrorResponse'
      summary: Update an existing Space
      tags:
      - spaces
  /tags:
    post:
      consumes:
      - application/json
      description: Create a new tag with the given details
      parameters:
      - description: Tag details
        in: body
        name: tag
        required: true
        schema:
          $ref: '#/definitions/models.TagRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.TagResponseForSwagger'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.GenericErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.GenericErrorResponse'
      summary: Create a new tag
      tags:
      - tags
  /tags/{id}:
    put:
      consumes:
      - application/json
      description: Update an existing tag with the given details
      parameters:
      - description: Tag ID
        in: path
        name: id
        required: true
        type: string
      - description: Tag details
        in: body
        name: tag
        required: true
        schema:
          $ref: '#/definitions/models.TagRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.TagResponseForSwagger'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.GenericErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.GenericErrorResponse'
      summary: Update an existing tag
      tags:
      - tags
  /tasks:
    post:
      consumes:
      - application/json
      description: Create a new task with the given details
      parameters:
      - description: Task details
        in: body
        name: task
        required: true
        schema:
          $ref: '#/definitions/models.TaskRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.TaskResponseForSwagger'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.GenericErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.GenericErrorResponse'
      summary: Create a new task
      tags:
      - tasks
  /tasks/{id}:
    put:
      consumes:
      - application/json
      description: Update an existing task with the given details
      parameters:
      - description: Task ID
        in: path
        name: id
        required: true
        type: string
      - description: Task details
        in: body
        name: task
        required: true
        schema:
          $ref: '#/definitions/models.TaskRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.TaskResponseForSwagger'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.GenericErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.GenericErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.GenericErrorResponse'
      summary: Update an existing task
      tags:
      - tasks
  /tasks/repetitive:
    post:
      consumes:
      - application/json
      description: Create a new repetitive task template with the given details
      parameters:
      - description: Repetitive task template details
        in: body
        name: task
        required: true
        schema:
          $ref: '#/definitions/models.CreateRepetitiveTaskTemplateRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.CreateRepetitiveTaskTemplateResponseForSwagger'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.GenericErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.GenericErrorResponse'
      summary: Create a new repetitive task template
      tags:
      - tasks
securityDefinitions:
  BearerAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
