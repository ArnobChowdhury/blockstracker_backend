services:
  app:
    build: .
    container_name: go_app
    ports:
      - "5000:8080"
    volumes:
      - .:/app
      - /app/tmp
    depends_on:
      - db
      - redis
    environment:
      DB_USER: ${DB_USER}
      DB_PASSWORD: ${DB_PASSWORD}
      DB_NAME: ${DB_NAME}
      TEST_DB_NAME: ${TEST_DB_NAME}
      GOOSE_DRIVER: postgres
      GOOSE_DBSTRING: postgres://${DB_USER}:${DB_PASSWORD}@db/${DB_NAME}?sslmode=disable
      GOOSE_MIGRATION_DIR: /app/migrations
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      REDIS_HOST: go_cache
      REDIS_PASSWORD: ${REDIS_PASSWORD}
      PORT: 8080
      JWT_ACCESS_SECRET: ${JWT_ACCESS_SECRET}
      JWT_REFRESH_SECRET: ${JWT_REFRESH_SECRET}
      GOOGLE_WEB_CLIENT_ID: ${GOOGLE_WEB_CLIENT_ID}

  db:
    image: postgres:15
    container_name: go_db
    restart: always
    volumes:
      - go_db_data:/var/lib/postgresql/data
      - ./init-scripts:/docker-entrypoint-initdb.d
    environment:
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: ${DB_NAME}
    healthcheck:
      test: [ "CMD", "pg_isready" ]
      interval: 30s
      timeout: 5s
      retries: 3

  redis:
    image: redis:7
    container_name: go_cache
    restart: always
    ports:
      - "6379:6379"
    environment:
      REDIS_PASSWORD: ${REDIS_PASSWORD}
    command: [ "redis-server", "--requirepass", "${REDIS_PASSWORD}" ]

volumes:
  go_db_data:
